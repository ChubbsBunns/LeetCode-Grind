Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

// Explanation:
There are 2 ways to do this.
Both with O(N) runtime complexity.
However one way requires O(N) extra space complexity,
where the other only requires O(1) extra space complexity.

1) Using a set:
Use a set to store all the numbers in the list since they're unique.
Then iterate through the length of the list to see which number is not in the set.

2) Using XOR:
XOR a variable initialised as 0 with every number from 0 to the length of the list.
Then XOR it again with every single number in the list.
The remaining number will be your answer.
But remember to XOR and NOT add numbers to the variable. Thats all.

Done

