Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

// Explanation:
Create a queue for nodes to clear. Initialize it with the root node.
The over arching solution is to use the queue to push in neighbors of a node, and iterate through it's own neighbors.
Loops are prevented by creating a cloneNodes dictionary, with the value as the key and the node object as the value.
Prevent adding to the queue if the node is already in cloned nodes.

My main trouble here is sesiously just syntax issues.